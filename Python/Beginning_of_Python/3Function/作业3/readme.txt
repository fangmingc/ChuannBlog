Simulate_SQL


1.程序介绍
2.程序实现的功能与方法
3.遇到的问题
4.进一步的设想
5.关于语句的使用

1.程序介绍：
    本程序模拟sql命令行操作文件。
    模拟的语句有:
        select <列名> where <条件>
        add <信息>
        delete <id>/<姓名>
        set <列名>=<修改值> where <条件>
        help <命令>
    通过这几条语句可以对Employee_info_table文件进行相关操作。

2.程序实现：
    本程序一共设计了13个函数。
    基本实现select、add、delete、set四个语句。
    使用装饰器完成了登录认证、权限认证两个功能。

    2.1 读取文件
        将文件读成二维列表，横向为单个用户信息，纵向为用户id排列。
        [[2,mxt,23,13304320533,Teacher],
         [5,chuck,18,15622325685,Student],]

    2.2 select语句：select <列名> where <条件>
        eg:select name, age where
        将语句去掉select，用where切割，切割后的数据分开传入select函数
        范围和条件分别进行判断和继续切割
        将name和age处理成索引，读出符合条件的所有用户信息
        对符合条件的用户信息按照索引切割，返回结果
    2.3 add语句：add <信息>
        eg:add jack, 23,12312432532,student
        将语句去掉add后的信息传进add函数
        将信息以逗号切割，判断信息格式是否符合写入标准
        判断每一项是否为空，当为空则初始化信息
        给信息增加id，写入文件
    2.4 delete语句：delete <id>/<name>
        eg:delete 5
        将语句去掉delete后的部分传进delete函数
        判断是数字还是字母，不同情况的下一步略有不同
        检测id或者name是否存在，如果存在则打开旧文件
        一边读旧文件内容一边写进新文件，遇到需要删除的项目则不写入
        完成后将新文件覆盖旧文件
    2.5 set语句：
        eg:set name = fff where id =3
        将语句去掉set后按照where切割，切割后分开传入set函数
        判断修改内容是否符合标准，符合则继续，本程序一次只能修改单个值
        将所有范围和条件传给select，获取符合条件的数据
        对符合条件的数据进行修改
        打开文件，将旧文件的内容写入新文件，遇到修改后的数据则写入修改后的数据
    2.6 装饰器的使用
        登录认证：
            程序运行后需要登录后才可以操作员工信息文件。
            可以操作文件的用户在Account文件可以查看。
                部分可登录用户名及密码：
                    alex,alex,2
                    egon,egon,3
                    chuck,chuck,2
                    mxt,mxt,4
        权限认证：
            程序delete语句和set语句需要1、2级用户权限才可以操作。

3.遇到的问题：
    1.试图优化search函数中的重复语句未能成功；（第144-159行）
    2.set语句如果修改数据为非法值，无法检测，可能导致报异常程序异常终止，想到的办法是增加大量的条件判断语句，但觉得过于繁琐；
        如修改手机号为字母，修改的时候不会报错，但是有可能在其他地方报错
    3.set语句无法同时修改多个值，初步解决办法是增加检测和分割，同时分离出判断语句为一个函数；
    4.当函数加上装饰器之后，就无法对原函数使用__doc__方法，返回值是None
        已解决，导入functools模块，在装饰器内部函数前使用@functools.wraps(func)即可（20170802）
    5.判断语句无法检测到字符串与数字的对比，当尝试条件为name>2时，程序异常退出

4.进一步的设想：
    1.改用字典读取和收集数据
    2.增加对Account文件的修改，需求权限为1级
    3.优化help函数，将help的说明放在readme文件
    4.优化代码，合并代码，减少重复或相近的代码

5.关于语句的使用：
    1.select <列名> where <条件>
        <列名>
            支持列名：
                'id', 'name', 'age', 'phone', 'job'， '*'
            指令示范:
                eg: name,age...
                    * 代表所有列名
            支持模糊指令（一定限度内）:
                eg: name age
                    name,    age
                    *  ,  name
        <条件>
            支持逻辑（按优先级排列）：
                '>=', '<=', '!=', '<>', >', '<', '=', 'like'
            指令示范：
                eg: id>=3
                    job=IT
                    phone like 133
                    name like e
            支持一定的模糊指令:
                eg: age == 23
                    job!=   IT
                    phonelike133
        自定义异常范围：
            1.关键词select或where错误，报错；
            2.范围或条件为空，或不存在，报错；

    2.add <信息>
        <信息>
            支持信息格式：
                姓名,年龄,电话,职位
            格式说明：
                1.四个信息只能用三个西文逗号隔开；
                2.姓名必须是字母，且不允许和现有的姓名重复，区分大小写；
                3.年龄要求18-99岁；
                4.电话支持座机6位、手机号11位；
                5.职位是固定的（不区分大小写）：'teacher', 'it', 'student', 'Employee'；
            指令示范：
                eg: jack,22,13340578393,student
            支持一定的模糊指令:
                eg: jack,  22  ,  13340578393,student
                    jack,,,student
                    jack,,,

    3.delete <id>/<name>
        <id>/<name>
            支持格式：
                id号码或者员工姓名
            格式说明：
                1.id必须为数字；
                2.姓名区分大小写；
            指令示范：
                eg: 4
                    chuck

    4.set <列名>=<修改值> where <条件>
        <列名>=<修改值>
            支持格式：
                一次只能修改一个列名
                列名：'name', 'age', 'phone', 'job'
                修改值：不限
        <条件>
            支持逻辑：
                '>=', '<=', '!=', '<>', >', '<', '=', 'like'
        指令示范：
            set name=alex where name=Alex
    5.help <命令>
        <命令>
            支持命令：
                'select', 'add', 'delete', 'set'